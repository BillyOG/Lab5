/**********************************
* ADC Controlled LED
*
* Example which controls the LED Brightness via PWM which is varied based on an ADC
Reading
*
* Author: Russell Trafford
* Revision: 1.1
* Last Revision Date: 12OCT22
*
* Change Log:
* - Changed LED Pin to 6.0 to allow for control by Timer3B module
* - Using Pin 1.1 for being connected to Grove Connector Analog Channel 1
*
*
* Pin Map:
* MSP430FR2355
* -----------------
* /|\. | |
* |. | |
* -- |RST |
* | |
* >---|P1.1/A1 P6.0|--> LED --> Wired to LED 2 through external wire to P6.6
*
* ****WARNING****
* Please disconnect J11 and connect to Pin 6.0 to the lower part of the jumper
*
* ____
* | NC | <-- Keep this Disconnected
* |---- |
* | ** | <-- Connect to this part of J11
* |____. |
*
*
* Peripherals Used:
* ADC12 - Channel 1 (Pin 1.1)
* GPIO - Pin 6.0
* TimerB0 - UP Mode, CCR1 for PWM Control, controls Pin 6.0
*/
#include <msp430.h>
/**
* main.c
*/
void gpioInit(); // Setup the GPIO Pins for controlling the LEDS through PWM (no input arguments)

void timerInit(); // Setup Timer to control the LEDS (no input arguments)

void adcInit(); // Setup ADC to do single, on demand samples (no input arguments)

int readADCSingle(); // Single Read ADC, no input arguments, returns current ADC reading

void setLEDBrightness(int DutyCycle); // Takes in a duty cycle from 0-100 and converts it to an appropriate CCR value


int main(void)
{
WDTCTL = WDTPW | WDTHOLD; // stop watchdog timer

gpioInit();

adcInit();

timerInit();

while(1){
    
readADCSingle();

setLEDBrightness();

}
return 0;
}
/**
* GPIO INIT
* Initialize all GPIO Pins. Current Pin configuration:
* Pin 1.0: OUTPUT, GPIO
* Pin 1.1: INPUT, ADC Channel 1
*/
void gpioInit(){
    P1DIR |= BIT0;              // Configure P1.0 to an Output

    P1DIR &= ~BIT1;             // Configure P4.1 to an Input
    // Configure GPIO Pin
    // Configure ADC Pin
}
/**
* Timer INIT
* Initialize the Timer Peripheral to control a GPIO Pin with PWM in up mode
* Timer Mode: Up Mode
*/
void timerInit(){
    
// Configure Timer Module to Up Mode
// Configure CCR Registers
    
}
/**
* ADC INIT
* Initialize the ADC Peripheral to read Single measurements on demand.
* ADC MODE: Single Sample, Single Conversion
*/
void adcInit(){
}
/**
* Read Single ADC Sample from Channel 0 of the ADC12 Peripheral
* Returns an ADC Sample without interrupts.
*/
int readADCSingle(){
while (!(ADCIFG & ADCIFG0)); // Wait for sample to be sampled and converted
}
/**
* Set LED Brightness on the LED configured from gpioInit. This modifies the
* CCR register based on the input.
* int DutyCycle: Value between 0-100
*/
void setLEDBrightness(int DutyCycle)
{
    
}
